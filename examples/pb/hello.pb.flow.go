// Code generated by proto-gen-flow. DO NOT EDIT.
// source: github.com/vine-io/flow/examples/pb/hello.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	json "github.com/json-iterator/go"
	flow "github.com/vine-io/flow"
	client "github.com/vine-io/vine/core/client"
	math "math"
	reflect "reflect"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

var _ flow.Entity = (*Echo)(nil)

type HelloEcho struct {
	h HelloFlowHandler
}

func NewHelloEcho(h HelloFlowHandler) *HelloEcho {
	return &HelloEcho{h: h}
}

func (e *HelloEcho) Owner() reflect.Type {
	return reflect.TypeOf(new(Echo))
}

func (p *HelloEcho) Call(ctx context.Context, data []byte) ([]byte, error) {
	in := &EchoRequest{}
	err := json.Unmarshal(data, &in)
	if err != nil {
		return nil, err
	}

	out := &EchoResponse{}
	if err = p.h.Echo(ctx, in, out); err != nil {
		return nil, err
	}
	return json.Marshal(out)
}

func (p *HelloEcho) Desc() string {
	return "ping 请求"
}

type HelloPing struct {
	h HelloFlowHandler
}

func NewHelloPing(h HelloFlowHandler) *HelloPing {
	return &HelloPing{h: h}
}

func (e *HelloPing) Owner() reflect.Type {
	return reflect.TypeOf(new(Echo))
}

func (p *HelloPing) Call(ctx context.Context, data []byte) ([]byte, error) {
	in := &PingRequest{}
	err := json.Unmarshal(data, &in)
	if err != nil {
		return nil, err
	}

	out := &PingResponse{}
	if err = p.h.Ping(ctx, in, out); err != nil {
		return nil, err
	}
	return json.Marshal(out)
}

func (p *HelloPing) Desc() string {
	return "HelloPing"
}

// Client API for Hello service
// +gen:entity=Echo
type HelloFlowClient interface {
	// ping 请求
	Echo(ctx context.Context, in *EchoRequest, opts ...client.CallOption) (*EchoResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PingResponse, error)
}

type helloFlowClient struct {
	target string
	c      *flow.Client
}

// HelloFlowClient for Echo
func NewHelloFlowClient(target string, c *flow.Client) HelloFlowClient {
	return &helloFlowClient{
		target: target,
		c:      c,
	}
}

func (c *helloFlowClient) Echo(ctx context.Context, in *EchoRequest, opts ...client.CallOption) (*EchoResponse, error) {
	data, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	result, err := c.c.Call(ctx, c.target, flow.GetTypePkgName(reflect.TypeOf(new(HelloEcho))), data, opts...)
	if err != nil {
		return nil, err
	}
	out := new(EchoResponse)
	if err = json.Unmarshal(result, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloFlowClient) Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PingResponse, error) {
	data, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	result, err := c.c.Call(ctx, c.target, flow.GetTypePkgName(reflect.TypeOf(new(HelloPing))), data, opts...)
	if err != nil {
		return nil, err
	}
	out := new(PingResponse)
	if err = json.Unmarshal(result, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func RegisterHelloFlowHandler(s *flow.ClientStore, hdlr HelloFlowHandler) {
	s.Load(NewHelloEcho(hdlr))
	s.Load(NewHelloPing(hdlr))
}

// Server API for Hello service
// +gen:entity=Echo
type HelloFlowHandler interface {
	// ping 请求
	Echo(context.Context, *EchoRequest, *EchoResponse) error
	Ping(context.Context, *PingRequest, *PingResponse) error
}
