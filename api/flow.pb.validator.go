// Code generated by proto-gen-validator
// source: github.com/vine-io/flow/api/flow.proto

package api

import (
	fmt "fmt"
	is "github.com/vine-io/vine/util/is"
)

func (m *OwnerReference) Validate() error {
	return m.ValidateE("")
}

func (m *OwnerReference) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Client) Validate() error {
	return m.ValidateE("")
}

func (m *Client) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Entity) Validate() error {
	return m.ValidateE("")
}

func (m *Entity) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Echo) Validate() error {
	return m.ValidateE("")
}

func (m *Echo) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Step) Validate() error {
	return m.ValidateE("")
}

func (m *Step) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Revision) Validate() error {
	return m.ValidateE("")
}

func (m *Revision) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *WorkflowOption) Validate() error {
	return m.ValidateE("")
}

func (m *WorkflowOption) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int32(m.Mode) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4}, int32(m.Mode)) {
			errs = append(errs, fmt.Errorf("field '%smode' must in '[0, 1, 2, 3, 4]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *WorkflowStatus) Validate() error {
	return m.ValidateE("")
}

func (m *WorkflowStatus) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int32(m.State) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4, 5, 6, 7}, int32(m.State)) {
			errs = append(errs, fmt.Errorf("field '%sstate' must in '[0, 1, 2, 3, 4, 5, 6, 7]'", prefix))
		}
	}
	if int32(m.Action) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4}, int32(m.Action)) {
			errs = append(errs, fmt.Errorf("field '%saction' must in '[0, 1, 2, 3, 4]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *WorkflowStep) Validate() error {
	return m.ValidateE("")
}

func (m *WorkflowStep) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Workflow) Validate() error {
	return m.ValidateE("")
}

func (m *Workflow) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *WorkflowSnapshot) Validate() error {
	return m.ValidateE("")
}

func (m *WorkflowSnapshot) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int32(m.Action) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4}, int32(m.Action)) {
			errs = append(errs, fmt.Errorf("field '%saction' must in '[0, 1, 2, 3, 4]'", prefix))
		}
	}
	if int32(m.State) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4, 5, 6, 7}, int32(m.State)) {
			errs = append(errs, fmt.Errorf("field '%sstate' must in '[0, 1, 2, 3, 4, 5, 6, 7]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *WorkflowWatchResult) Validate() error {
	return m.ValidateE("")
}

func (m *WorkflowWatchResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int32(m.Action) != 0 {
		if !is.In([]int32{0, 1, 2, 3}, int32(m.Action)) {
			errs = append(errs, fmt.Errorf("field '%saction' must in '[0, 1, 2, 3]'", prefix))
		}
	}
	if int32(m.Type) != 0 {
		if !is.In([]int32{0, 1, 2, 3, 4}, int32(m.Type)) {
			errs = append(errs, fmt.Errorf("field '%stype' must in '[0, 1, 2, 3, 4]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}
