syntax = "proto3";

package api;

import "github.com/vine-io/flow/api/flow.proto";

option go_package = "github.com/vine-io/flow/api";
option java_package = "io.vine.flow.v1";
option java_multiple_files = true;

service FlowRpc {
    rpc Register (RegisterRequest) returns (RegisterResponse);
    rpc Call (CallRequest) returns (CallResponse);
    rpc Step (StepRequest) returns (StepResponse);
    rpc Pipe (stream PipeRequest) returns (stream PipeResponse);
    rpc ListWorkflow (ListWorkflowRequest) returns (ListWorkflowResponse);
    rpc RunWorkflow (RunWorkflowRequest) returns (stream RunWorkflowResponse);
    rpc InspectWorkflow (InspectWorkflowRequest) returns (InspectWorkflowResponse);
    rpc AbortWorkflow (AbortWorkflowRequest) returns (AbortWorkflowResponse);
    rpc WatchWorkflow (WatchWorkflowRequest) returns (stream WatchWorkflowResponse);
    rpc StepGet(StepGetRequest) returns (StepGetResponse);
    rpc StepPut(StepPutRequest) returns (StepPutResponse);
    rpc StepTrace(StepTraceRequest) returns (StepTraceResponse);
}

enum Topic {
    T_UNKNOWN = 0;
    T_CALL = 1;
    T_STEP = 2;
}

message RegisterRequest {
    string id = 1;
    repeated Entity entities = 2;
    repeated Echo echoes = 3;
    repeated Step steps = 4;
}

message RegisterResponse {}

message CallRequest {
    string id = 1;
    bytes request = 2;
}

message CallResponse {
    bytes response = 1;
}

message StepRequest {
    string id = 1;
    StepAction action = 2;
}

message StepResponse {
    bytes response = 1;
}

message PipeRequest {
    string id = 1;
    Topic topic = 2;
    Revision revision = 3;
    PipeCallResponse call = 4;
    PipeStepResponse step = 5;

}

message PipeResponse {
    Topic topic = 1;
    Revision revision = 2;
    PipeCallRequest call = 3;
    PipeStepRequest step = 4;
}

message PipeCallRequest {
    bytes data = 1;
}

message PipeCallResponse {
    bytes data = 1;
    string error = 2;
}

message PipeStepRequest {
    StepAction action = 1;
}

message PipeStepResponse {
    bytes data = 1;
    string error = 2;
}

message ListWorkflowRequest {}

message ListWorkflowResponse {
    repeated WorkflowSnapshot snapshots = 1;
}

message RunWorkflowRequest {
    Workflow workflow = 1;
    bool watch = 2;
}

message RunWorkflowResponse {
    WorkflowWatchResult result = 1;
}

message InspectWorkflowRequest {
    string wid = 1;
}

message InspectWorkflowResponse {
    Workflow workflow = 1;
}

message AbortWorkflowRequest {
    string wid = 1;
}

message AbortWorkflowResponse {}

message WatchWorkflowRequest {
    string wid = 1;
    string cid = 2;
}

message WatchWorkflowResponse {
    WorkflowWatchResult result = 1;
}

message StepGetRequest {}

message StepGetResponse {}

message StepPutRequest {}

message StepPutResponse {}

message StepTraceRequest {}

message StepTraceResponse {}