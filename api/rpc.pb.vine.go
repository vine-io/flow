// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/flow/api/rpc.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for FlowRpc service
func NewFlowRpcEndpoints() []api.Endpoint {
	return []api.Endpoint{}
}

// Client API for FlowRpc service
type FlowRpcService interface {
	ListWorker(ctx context.Context, in *ListWorkerRequest, opts ...client.CallOption) (*ListWorkerResponse, error)
	GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...client.CallOption) (*GetWorkerResponse, error)
	ListRegistry(ctx context.Context, in *ListRegistryRequest, opts ...client.CallOption) (*ListRegistryResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	WorkHook(ctx context.Context, in *WorkHookRequest, opts ...client.CallOption) (FlowRpc_WorkHookService, error)
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	Step(ctx context.Context, in *StepRequest, opts ...client.CallOption) (*StepResponse, error)
	Pipe(ctx context.Context, opts ...client.CallOption) (FlowRpc_PipeService, error)
	DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, opts ...client.CallOption) (*DeployWorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...client.CallOption) (*GetWorkflowResponse, error)
	ListWorkflow(ctx context.Context, in *ListWorkflowRequest, opts ...client.CallOption) (*ListWorkflowResponse, error)
	RunWorkflowInstance(ctx context.Context, in *RunWorkflowInstanceRequest, opts ...client.CallOption) (FlowRpc_RunWorkflowInstanceService, error)
	ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, opts ...client.CallOption) (*ListWorkflowInstanceResponse, error)
	InspectWorkflowInstance(ctx context.Context, in *InspectWorkflowInstanceRequest, opts ...client.CallOption) (*InspectWorkflowInstanceResponse, error)
	AbortWorkflowInstance(ctx context.Context, in *AbortWorkflowInstanceRequest, opts ...client.CallOption) (*AbortWorkflowInstanceResponse, error)
	PauseWorkflowInstance(ctx context.Context, in *PauseWorkflowInstanceRequest, opts ...client.CallOption) (*PauseWorkflowInstanceResponse, error)
	ResumeWorkflowInstance(ctx context.Context, in *ResumeWorkflowInstanceRequest, opts ...client.CallOption) (*ResumeWorkflowInstanceResponse, error)
	ListInteractive(ctx context.Context, in *ListInteractiveRequest, opts ...client.CallOption) (*ListInteractiveResponse, error)
	CommitInteractive(ctx context.Context, in *CommitInteractiveRequest, opts ...client.CallOption) (*CommitInteractiveResponse, error)
	WatchWorkflowInstance(ctx context.Context, in *WatchWorkflowInstanceRequest, opts ...client.CallOption) (FlowRpc_WatchWorkflowInstanceService, error)
	StepGet(ctx context.Context, in *StepGetRequest, opts ...client.CallOption) (*StepGetResponse, error)
	StepPut(ctx context.Context, in *StepPutRequest, opts ...client.CallOption) (*StepPutResponse, error)
	StepTrace(ctx context.Context, in *StepTraceRequest, opts ...client.CallOption) (*StepTraceResponse, error)
}

type flowRpcService struct {
	c    client.Client
	name string
}

func NewFlowRpcService(name string, c client.Client) FlowRpcService {
	return &flowRpcService{
		c:    c,
		name: name,
	}
}

func (c *flowRpcService) ListWorker(ctx context.Context, in *ListWorkerRequest, opts ...client.CallOption) (*ListWorkerResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ListWorker", in)
	out := new(ListWorkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...client.CallOption) (*GetWorkerResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.GetWorker", in)
	out := new(GetWorkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) ListRegistry(ctx context.Context, in *ListRegistryRequest, opts ...client.CallOption) (*ListRegistryResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ListRegistry", in)
	out := new(ListRegistryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) WorkHook(ctx context.Context, in *WorkHookRequest, opts ...client.CallOption) (FlowRpc_WorkHookService, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.WorkHook", &WorkHookRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &flowRpcServiceWorkHook{stream}, nil
}

type FlowRpc_WorkHookService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WorkHookResponse, error)
}

type flowRpcServiceWorkHook struct {
	stream client.Stream
}

func (x *flowRpcServiceWorkHook) Close() error {
	return x.stream.Close()
}

func (x *flowRpcServiceWorkHook) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcServiceWorkHook) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcServiceWorkHook) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcServiceWorkHook) Recv() (*WorkHookResponse, error) {
	m := new(WorkHookResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowRpcService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) Step(ctx context.Context, in *StepRequest, opts ...client.CallOption) (*StepResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.Step", in)
	out := new(StepResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) Pipe(ctx context.Context, opts ...client.CallOption) (FlowRpc_PipeService, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.Pipe", &PipeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &flowRpcServicePipe{stream}, nil
}

type FlowRpc_PipeService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PipeRequest) error
	Recv() (*PipeResponse, error)
}

type flowRpcServicePipe struct {
	stream client.Stream
}

func (x *flowRpcServicePipe) Close() error {
	return x.stream.Close()
}

func (x *flowRpcServicePipe) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcServicePipe) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcServicePipe) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcServicePipe) Send(m *PipeRequest) error {
	return x.stream.Send(m)
}

func (x *flowRpcServicePipe) Recv() (*PipeResponse, error) {
	m := new(PipeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowRpcService) DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, opts ...client.CallOption) (*DeployWorkflowResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.DeployWorkflow", in)
	out := new(DeployWorkflowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...client.CallOption) (*GetWorkflowResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.GetWorkflow", in)
	out := new(GetWorkflowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) ListWorkflow(ctx context.Context, in *ListWorkflowRequest, opts ...client.CallOption) (*ListWorkflowResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ListWorkflow", in)
	out := new(ListWorkflowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) RunWorkflowInstance(ctx context.Context, in *RunWorkflowInstanceRequest, opts ...client.CallOption) (FlowRpc_RunWorkflowInstanceService, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.RunWorkflowInstance", &RunWorkflowInstanceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &flowRpcServiceRunWorkflowInstance{stream}, nil
}

type FlowRpc_RunWorkflowInstanceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*RunWorkflowInstanceResponse, error)
}

type flowRpcServiceRunWorkflowInstance struct {
	stream client.Stream
}

func (x *flowRpcServiceRunWorkflowInstance) Close() error {
	return x.stream.Close()
}

func (x *flowRpcServiceRunWorkflowInstance) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcServiceRunWorkflowInstance) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcServiceRunWorkflowInstance) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcServiceRunWorkflowInstance) Recv() (*RunWorkflowInstanceResponse, error) {
	m := new(RunWorkflowInstanceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowRpcService) ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, opts ...client.CallOption) (*ListWorkflowInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ListWorkflowInstance", in)
	out := new(ListWorkflowInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) InspectWorkflowInstance(ctx context.Context, in *InspectWorkflowInstanceRequest, opts ...client.CallOption) (*InspectWorkflowInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.InspectWorkflowInstance", in)
	out := new(InspectWorkflowInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) AbortWorkflowInstance(ctx context.Context, in *AbortWorkflowInstanceRequest, opts ...client.CallOption) (*AbortWorkflowInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.AbortWorkflowInstance", in)
	out := new(AbortWorkflowInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) PauseWorkflowInstance(ctx context.Context, in *PauseWorkflowInstanceRequest, opts ...client.CallOption) (*PauseWorkflowInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.PauseWorkflowInstance", in)
	out := new(PauseWorkflowInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) ResumeWorkflowInstance(ctx context.Context, in *ResumeWorkflowInstanceRequest, opts ...client.CallOption) (*ResumeWorkflowInstanceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ResumeWorkflowInstance", in)
	out := new(ResumeWorkflowInstanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) ListInteractive(ctx context.Context, in *ListInteractiveRequest, opts ...client.CallOption) (*ListInteractiveResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.ListInteractive", in)
	out := new(ListInteractiveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) CommitInteractive(ctx context.Context, in *CommitInteractiveRequest, opts ...client.CallOption) (*CommitInteractiveResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.CommitInteractive", in)
	out := new(CommitInteractiveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) WatchWorkflowInstance(ctx context.Context, in *WatchWorkflowInstanceRequest, opts ...client.CallOption) (FlowRpc_WatchWorkflowInstanceService, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.WatchWorkflowInstance", &WatchWorkflowInstanceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &flowRpcServiceWatchWorkflowInstance{stream}, nil
}

type FlowRpc_WatchWorkflowInstanceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WatchWorkflowInstanceResponse, error)
}

type flowRpcServiceWatchWorkflowInstance struct {
	stream client.Stream
}

func (x *flowRpcServiceWatchWorkflowInstance) Close() error {
	return x.stream.Close()
}

func (x *flowRpcServiceWatchWorkflowInstance) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcServiceWatchWorkflowInstance) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcServiceWatchWorkflowInstance) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcServiceWatchWorkflowInstance) Recv() (*WatchWorkflowInstanceResponse, error) {
	m := new(WatchWorkflowInstanceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowRpcService) StepGet(ctx context.Context, in *StepGetRequest, opts ...client.CallOption) (*StepGetResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.StepGet", in)
	out := new(StepGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) StepPut(ctx context.Context, in *StepPutRequest, opts ...client.CallOption) (*StepPutResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.StepPut", in)
	out := new(StepPutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowRpcService) StepTrace(ctx context.Context, in *StepTraceRequest, opts ...client.CallOption) (*StepTraceResponse, error) {
	req := c.c.NewRequest(c.name, "FlowRpc.StepTrace", in)
	out := new(StepTraceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlowRpc service
type FlowRpcHandler interface {
	ListWorker(context.Context, *ListWorkerRequest, *ListWorkerResponse) error
	GetWorker(context.Context, *GetWorkerRequest, *GetWorkerResponse) error
	ListRegistry(context.Context, *ListRegistryRequest, *ListRegistryResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	WorkHook(context.Context, *WorkHookRequest, FlowRpc_WorkHookStream) error
	Call(context.Context, *CallRequest, *CallResponse) error
	Step(context.Context, *StepRequest, *StepResponse) error
	Pipe(context.Context, FlowRpc_PipeStream) error
	DeployWorkflow(context.Context, *DeployWorkflowRequest, *DeployWorkflowResponse) error
	GetWorkflow(context.Context, *GetWorkflowRequest, *GetWorkflowResponse) error
	ListWorkflow(context.Context, *ListWorkflowRequest, *ListWorkflowResponse) error
	RunWorkflowInstance(context.Context, *RunWorkflowInstanceRequest, FlowRpc_RunWorkflowInstanceStream) error
	ListWorkflowInstance(context.Context, *ListWorkflowInstanceRequest, *ListWorkflowInstanceResponse) error
	InspectWorkflowInstance(context.Context, *InspectWorkflowInstanceRequest, *InspectWorkflowInstanceResponse) error
	AbortWorkflowInstance(context.Context, *AbortWorkflowInstanceRequest, *AbortWorkflowInstanceResponse) error
	PauseWorkflowInstance(context.Context, *PauseWorkflowInstanceRequest, *PauseWorkflowInstanceResponse) error
	ResumeWorkflowInstance(context.Context, *ResumeWorkflowInstanceRequest, *ResumeWorkflowInstanceResponse) error
	ListInteractive(context.Context, *ListInteractiveRequest, *ListInteractiveResponse) error
	CommitInteractive(context.Context, *CommitInteractiveRequest, *CommitInteractiveResponse) error
	WatchWorkflowInstance(context.Context, *WatchWorkflowInstanceRequest, FlowRpc_WatchWorkflowInstanceStream) error
	StepGet(context.Context, *StepGetRequest, *StepGetResponse) error
	StepPut(context.Context, *StepPutRequest, *StepPutResponse) error
	StepTrace(context.Context, *StepTraceRequest, *StepTraceResponse) error
}

func RegisterFlowRpcHandler(s server.Server, hdlr FlowRpcHandler, opts ...server.HandlerOption) error {
	type flowRpcImpl interface {
		ListWorker(ctx context.Context, in *ListWorkerRequest, out *ListWorkerResponse) error
		GetWorker(ctx context.Context, in *GetWorkerRequest, out *GetWorkerResponse) error
		ListRegistry(ctx context.Context, in *ListRegistryRequest, out *ListRegistryResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		WorkHook(ctx context.Context, stream server.Stream) error
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		Step(ctx context.Context, in *StepRequest, out *StepResponse) error
		Pipe(ctx context.Context, stream server.Stream) error
		DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, out *DeployWorkflowResponse) error
		GetWorkflow(ctx context.Context, in *GetWorkflowRequest, out *GetWorkflowResponse) error
		ListWorkflow(ctx context.Context, in *ListWorkflowRequest, out *ListWorkflowResponse) error
		RunWorkflowInstance(ctx context.Context, stream server.Stream) error
		ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, out *ListWorkflowInstanceResponse) error
		InspectWorkflowInstance(ctx context.Context, in *InspectWorkflowInstanceRequest, out *InspectWorkflowInstanceResponse) error
		AbortWorkflowInstance(ctx context.Context, in *AbortWorkflowInstanceRequest, out *AbortWorkflowInstanceResponse) error
		PauseWorkflowInstance(ctx context.Context, in *PauseWorkflowInstanceRequest, out *PauseWorkflowInstanceResponse) error
		ResumeWorkflowInstance(ctx context.Context, in *ResumeWorkflowInstanceRequest, out *ResumeWorkflowInstanceResponse) error
		ListInteractive(ctx context.Context, in *ListInteractiveRequest, out *ListInteractiveResponse) error
		CommitInteractive(ctx context.Context, in *CommitInteractiveRequest, out *CommitInteractiveResponse) error
		WatchWorkflowInstance(ctx context.Context, stream server.Stream) error
		StepGet(ctx context.Context, in *StepGetRequest, out *StepGetResponse) error
		StepPut(ctx context.Context, in *StepPutRequest, out *StepPutResponse) error
		StepTrace(ctx context.Context, in *StepTraceRequest, out *StepTraceResponse) error
	}
	type FlowRpc struct {
		flowRpcImpl
	}
	h := &flowRpcHandler{hdlr}
	endpoints := NewFlowRpcEndpoints()
	for _, ep := range endpoints {
		opts = append(opts, api.WithEndpoint(&ep))
	}
	return s.Handle(s.NewHandler(&FlowRpc{h}, opts...))
}

type flowRpcHandler struct {
	FlowRpcHandler
}

func (h *flowRpcHandler) ListWorker(ctx context.Context, in *ListWorkerRequest, out *ListWorkerResponse) error {
	return h.FlowRpcHandler.ListWorker(ctx, in, out)
}

func (h *flowRpcHandler) GetWorker(ctx context.Context, in *GetWorkerRequest, out *GetWorkerResponse) error {
	return h.FlowRpcHandler.GetWorker(ctx, in, out)
}

func (h *flowRpcHandler) ListRegistry(ctx context.Context, in *ListRegistryRequest, out *ListRegistryResponse) error {
	return h.FlowRpcHandler.ListRegistry(ctx, in, out)
}

func (h *flowRpcHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.FlowRpcHandler.Register(ctx, in, out)
}

func (h *flowRpcHandler) WorkHook(ctx context.Context, stream server.Stream) error {
	m := new(WorkHookRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FlowRpcHandler.WorkHook(ctx, m, &flowRpcWorkHookStream{stream})
}

type FlowRpc_WorkHookStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WorkHookResponse) error
}

type flowRpcWorkHookStream struct {
	stream server.Stream
}

func (x *flowRpcWorkHookStream) Close() error {
	return x.stream.Close()
}

func (x *flowRpcWorkHookStream) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcWorkHookStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcWorkHookStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcWorkHookStream) Send(m *WorkHookResponse) error {
	return x.stream.Send(m)
}

func (h *flowRpcHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.FlowRpcHandler.Call(ctx, in, out)
}

func (h *flowRpcHandler) Step(ctx context.Context, in *StepRequest, out *StepResponse) error {
	return h.FlowRpcHandler.Step(ctx, in, out)
}

func (h *flowRpcHandler) Pipe(ctx context.Context, stream server.Stream) error {
	return h.FlowRpcHandler.Pipe(ctx, &flowRpcPipeStream{stream})
}

type FlowRpc_PipeStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PipeResponse) error
	Recv() (*PipeRequest, error)
}

type flowRpcPipeStream struct {
	stream server.Stream
}

func (x *flowRpcPipeStream) Close() error {
	return x.stream.Close()
}

func (x *flowRpcPipeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcPipeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcPipeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcPipeStream) Send(m *PipeResponse) error {
	return x.stream.Send(m)
}

func (x *flowRpcPipeStream) Recv() (*PipeRequest, error) {
	m := new(PipeRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *flowRpcHandler) DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, out *DeployWorkflowResponse) error {
	return h.FlowRpcHandler.DeployWorkflow(ctx, in, out)
}

func (h *flowRpcHandler) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, out *GetWorkflowResponse) error {
	return h.FlowRpcHandler.GetWorkflow(ctx, in, out)
}

func (h *flowRpcHandler) ListWorkflow(ctx context.Context, in *ListWorkflowRequest, out *ListWorkflowResponse) error {
	return h.FlowRpcHandler.ListWorkflow(ctx, in, out)
}

func (h *flowRpcHandler) RunWorkflowInstance(ctx context.Context, stream server.Stream) error {
	m := new(RunWorkflowInstanceRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FlowRpcHandler.RunWorkflowInstance(ctx, m, &flowRpcRunWorkflowInstanceStream{stream})
}

type FlowRpc_RunWorkflowInstanceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RunWorkflowInstanceResponse) error
}

type flowRpcRunWorkflowInstanceStream struct {
	stream server.Stream
}

func (x *flowRpcRunWorkflowInstanceStream) Close() error {
	return x.stream.Close()
}

func (x *flowRpcRunWorkflowInstanceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcRunWorkflowInstanceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcRunWorkflowInstanceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcRunWorkflowInstanceStream) Send(m *RunWorkflowInstanceResponse) error {
	return x.stream.Send(m)
}

func (h *flowRpcHandler) ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, out *ListWorkflowInstanceResponse) error {
	return h.FlowRpcHandler.ListWorkflowInstance(ctx, in, out)
}

func (h *flowRpcHandler) InspectWorkflowInstance(ctx context.Context, in *InspectWorkflowInstanceRequest, out *InspectWorkflowInstanceResponse) error {
	return h.FlowRpcHandler.InspectWorkflowInstance(ctx, in, out)
}

func (h *flowRpcHandler) AbortWorkflowInstance(ctx context.Context, in *AbortWorkflowInstanceRequest, out *AbortWorkflowInstanceResponse) error {
	return h.FlowRpcHandler.AbortWorkflowInstance(ctx, in, out)
}

func (h *flowRpcHandler) PauseWorkflowInstance(ctx context.Context, in *PauseWorkflowInstanceRequest, out *PauseWorkflowInstanceResponse) error {
	return h.FlowRpcHandler.PauseWorkflowInstance(ctx, in, out)
}

func (h *flowRpcHandler) ResumeWorkflowInstance(ctx context.Context, in *ResumeWorkflowInstanceRequest, out *ResumeWorkflowInstanceResponse) error {
	return h.FlowRpcHandler.ResumeWorkflowInstance(ctx, in, out)
}

func (h *flowRpcHandler) ListInteractive(ctx context.Context, in *ListInteractiveRequest, out *ListInteractiveResponse) error {
	return h.FlowRpcHandler.ListInteractive(ctx, in, out)
}

func (h *flowRpcHandler) CommitInteractive(ctx context.Context, in *CommitInteractiveRequest, out *CommitInteractiveResponse) error {
	return h.FlowRpcHandler.CommitInteractive(ctx, in, out)
}

func (h *flowRpcHandler) WatchWorkflowInstance(ctx context.Context, stream server.Stream) error {
	m := new(WatchWorkflowInstanceRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FlowRpcHandler.WatchWorkflowInstance(ctx, m, &flowRpcWatchWorkflowInstanceStream{stream})
}

type FlowRpc_WatchWorkflowInstanceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchWorkflowInstanceResponse) error
}

type flowRpcWatchWorkflowInstanceStream struct {
	stream server.Stream
}

func (x *flowRpcWatchWorkflowInstanceStream) Close() error {
	return x.stream.Close()
}

func (x *flowRpcWatchWorkflowInstanceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *flowRpcWatchWorkflowInstanceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *flowRpcWatchWorkflowInstanceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *flowRpcWatchWorkflowInstanceStream) Send(m *WatchWorkflowInstanceResponse) error {
	return x.stream.Send(m)
}

func (h *flowRpcHandler) StepGet(ctx context.Context, in *StepGetRequest, out *StepGetResponse) error {
	return h.FlowRpcHandler.StepGet(ctx, in, out)
}

func (h *flowRpcHandler) StepPut(ctx context.Context, in *StepPutRequest, out *StepPutResponse) error {
	return h.FlowRpcHandler.StepPut(ctx, in, out)
}

func (h *flowRpcHandler) StepTrace(ctx context.Context, in *StepTraceRequest, out *StepTraceResponse) error {
	return h.FlowRpcHandler.StepTrace(ctx, in, out)
}
